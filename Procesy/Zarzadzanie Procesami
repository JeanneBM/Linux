Zarządzanie procesami to ogół zadań związanych z uruchamianiem, wstrzymywaniem, ponownym uruchamianiem i kończeniem pracy procesów. 

Operacja przekazania kontroli nad procesorem od jednego procesu do drugiego nazywana jest przełączaniem kontekstu (ang. context switch).

Każdy taki wycinek czasu (ang. time slice) pozwala procesowi na wykonanie całkiem sporej ilości obliczeń i rzeczywiście większość procesów 
może zakończyć swoje aktualne prace w ramach pojedynczego wycinka. A dzięki temu, że wycinki czasu są tak małe, ludzie nie są w stanie 
ich zauważyć, przez co system sprawia wrażenie, jakby działało w nim jednocześnie wiele różnych procesów 
- to cecha nazywana wielozadaniowością (ang. multitasking). 

Za przełączanie kontekstów odpowiedzialne jest jądro systemu. 

Kernel systemu działa pomiędzy wycinkami czasu przydzielanymi procesom, w trakcie przełączania kontekstów.

W nowoczesnych procesorach znajduje się specjalny moduł zarządzania pamięcią (MMU -ang. Memory Management Unit), który pozwala na korzystanie
ze schematu dostępu do pamięci nazywanego pamięcią wirtualną (ang. virtual memory). 
Podczas wykorzystania pamięci wirtualnej procesor nie adresuje jej bezpośrednio, podając fizyczny adres w sprzętowym układzie scalonym. 
W takiej konfiguracji jądro przygotowuje każdy proces tak, jakby sam miał do swojej dyspozycji całą maszynę. 
Gdy proces próbuje uzyskać dostęp do przydzielonej mu pamięci, moduł MMU przechwytuje taką próbę i wykorzystuje mechanizm mapowania adresów, 
żeby przekształcić lokahzację w pamięci procesu na fizyczną lokalizację w pamięci komputera. 

Implementacja mapy adresów pamięci nazywana jest tablicą stron (ang. page table). 

Dwa wywołania systemowe - fork() i exec() - są szczególnie istotne przy poznawaniu sposobu uruchamiania procesów w systemie. 

fork() - gdy dany proces wywołuje funkcję fork O, jądro systemu tworzy niemal identyczną kopię tego procesu. 
exec() - gdy proces wywołuje funkcję exec (program), jądro systemu uruchamia program, który zastępuje aktualny proces. 

W systemach Linuksowych wszystkie procesy użytkownika z wyjątkiem procesu init powstają w wyniku wywołania systemowego fork(). 
Dodatkowo, w większości przypadków wywoływana jest funkcja exec() pozwalająca na uruchomienie nowego programu 
bez tworzenia kopii istniejącego już procesu.

Bardzo prostym przykładem mogą być programy uruchamiane w wierszu poleceń, takie jak polecenie ls wyświetlające zawartość katalogu. 
Po wprowadzeniu polecenia ls w oknie terminala działająca w nim powłoka wywołuje funkcję fork() w celu utworzenia nowego procesu powłoki, 
a następnie ta nowa kopia procesu wywołuje funkcję exec(ls), uruchamiając tym samym program ls.

