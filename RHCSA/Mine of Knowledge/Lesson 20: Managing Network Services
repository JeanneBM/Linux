20.1 Understanding SSH Key-based Login

ssh-keygen	 	 -ssh->			services:
			<-x pub-
* private
* public --------------ssh-copy-id------------> * ~ pub

---------------------------------------------------------------------------------------------------------------------------------------------

20.2 Setting up SSH Key-based Login

Procedure Overview:
* ssh-keygen creates a public/private key pair for the current user 
	* Setting a passphrase for the private key makes it more secure, but less convenient

* ssh-copy-id copies the public key over to the target server
* ssh-agent /bin/bash allocates space in the bash shell to cache the private key passphrase
* ssh-add adds the current passphrase to the cache

ssh-keygen
Enter file ...: Enter
Enter passphrase: Enter
ssh-copy-id 192.168.4.237
ssh 192.168.4.237
Ctrl+Alt+F3
root
root
ssh-agent /bin/bash
ssh-add
ssh 192.168.4.237
exit

---------------------------------------------------------------------------------------------------------------------------------------------

20.3 Changing Common SSH Server Options

Common sshd_config Options:
* Server options are set in /etc/ssh/sshd_config
* Client options can be set in /etc/ssh/ssh_config
	* Port 22
	* PermitRootLogin
	* PubkeyAuthentication
	* PasswordAuthentication
	* X11Forwarding

vim /etc/ssh/shhd_config
"PermitRootLogin no
AllowUsers student"
systemctl restart sshd
ssh root*monkey*localhost

---------------------------------------------------------------------------------------------------------------------------------------------

20.4 Securely Copying Files 

Copying Files Securely:
* scp can be used to securely copy files over the network, using the sshd process:
	* scp file1 file2 student*monkey*remoteserver:/home/student
	* scp -r root*monkey*remoteserver:/tmp/files .

* sftp offers an FTP client interface to securely transfer files using SSH:
	* Use put /my/file to upload a file
	* Use get /your/file to download a file to the current directory
	* Use exit to close an sftp session


scp /etc/hosts linda*monkey*192.168.4.210:/tmp/
mkdir temp
scp -r root*monkey*192.168.4.210:/etc /temp
ls
cd temp/
ls
cd ..
sftp 192.168.4.210
sftp>:
	help
	lpwd
	pwd
	cd /
	cd etc
	lcd /tmp
	get /etc/passwd
	put /etc/passwd
	exit

---------------------------------------------------------------------------------------------------------------------------------------------

20.5 Securely Synchronizing Files

* rsync is using SSH to synchronize files
* If source and target file already exists, rsync will only synchronize their differences 
* The rsync command can be used with many options, of which the following are most common:
	* -r will recursively synchronize the entire directory tree
	* -l synchronizes symbolic links
	* -p preserves symbolic links 
	* -n will do a dry run before actually synchronizing 
	* -a uses archive mode, which is equivalent to -rlptgoD'
	* -A uses archive mode and also synchronizes ACLs
	* -X will synchronize SELinux context as well

ssh 192.168.4.210
touch /etc/mynewfile{1..10}
ls -l /etc/my*
exit
rsync -ar root*monkey*192.168.4.210:/etc/ temp/
ls temp/mynewfile*








