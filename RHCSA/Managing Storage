Red Hat Certified System Administrator (RHCSA) and Practice Tests 
November 2019
RHEL 8

14.1 Understanding Disk Layout

/dev/nvme0n1
/dev/sda
/dev/vda

BIOS
MBR
4 partitions
logical partition
extended


UEFI
GPT
128 partitions

lsblk 
parted /dev/nvme0n1
cd /dev
ls -l nvm*

kernel perspective: cat /proc/partitions

-------------------------------------------------------------------------------------------------------------------------------------

14.2 Understanding Linux Storage Options

Linux Storage Options

* Partitions: the classical solution, use in all cases
	* Use to allocate dedicated storage to specific types of data

* LVM Logical Volumes 
	* Used at default installation on RHEL
	* Adds flexibility to storage (resize, snapshots and more)

* Stratis 
	* Next generation Volume Managing Filesystem that uses thin provisioning by default 
	* Implemented in user space, which makes API access possible

* Virtual Data Optimizer
	* Focused on storing files in the most efficient way
	* Manages deduplicated and compressed storage pools

-------------------------------------------------------------------------------------------------------------------------------------

14.3 Understanding GPT and MBR Partitions

* Master Boot Record (MBR) is part of the 1981 PC specification 
	* 512 bytes to store boot information
	* 64 bytes ti store partitions 
	* Place for 4 partitions only with a max size of 2 TiB
	* To use more partitions, extended and logical partitions must be used

* GUID Partition Table is a newer partition table (2010)
	* More space to store partitions
	* Used to overcome MBR limitations
	* 128 partitions max

-------------------------------------------------------------------------------------------------------------------------------------

14.4 Creating Partitions with parted


Understanding Partioning:
* While creating a partition, you do NOT automatically create a file system
* The parted file system attribute only writes some unimportant file system metadata
* In RHEL 8, parted is the dafault utility
* Alternatively, use fdisk to work with MBR and gdisk to use GUID partitions

Procedure Overview-1:
* parted /dev/sdb
* print will show if there is a current partition table
* mklabel msdos | gpt
* mkpart part-type name fs-type start end
	* part-type: applies to MBR only and sets primary, logical or extended partition
	* name:  arbitrary name, required for GPT
	* fs-type: does NOT modify the filesystem, but sets some irrelevant file system dependent metadata
	* start end: specify start and end, counting from the beginning of the disk

	* For instance: mkpart primary 1024MiB 2048MiB

Procedure Overview-2:
* print to verify creation of the new partition
* quit to exit the parted shell
* udevadm settle to ensure that the new partition device is created 
* cat /proc/partitions to verify the creation of the partition

way to manage a partition:
lsblk -> parted /dev/nvme0n2 -> print -> mklabel gpt -> print -> mkpart one 1MiB 1024MiB -> print -> quit -> udevadm settle ->
to check: cat /proc/partitions //also: lsblk

-------------------------------------------------------------------------------------------------------------------------------------

14.5 Creating MBR Partitions with fdisk

lsblk -> fdisk /dev/nvme0n3 -> Command: n -> p //as primary -> Last sector...:+1G

Command: p // as "print" to see created partitions

partprobe

-------------------------------------------------------------------------------------------------------------------------------------

14.6 Understanding File System Differences 

XFS is the dafault file system
	* Fast and scalable 
	* Uses CoW to guarantee data integrity
	* Size can be increased, not decreased

Ext4 was default in RHEL 6 and is still used
	* Backward compatible to Ext2
	* Uses Journal to guarantee data integrity
	* Size can be increased and decreased

Other file systems are avaliable but less common 

-------------------------------------------------------------------------------------------------------------------------------------

14.7 Making and Mounting File Systems

mkfs.xfs creates an XFS file system 
mkfs.ext4 creates an Ext4 file system
Use mkfs.[Tab][Tab] to show a list of avaliable file systems
Do NOT use mkfs as it will create an Ext2 file system!
After making the file system, you can mount it in runtime using the mount command
Use umount before disconnecting a device

lsblk -> mkfs.xfs /dev/nvme0n3p1 -> mount /dev/nvme0n3p1 /mnt -> mount -> last lines 

mount | grep '^/' -> cd /mnt -> ls -> cp /etc/hosts . -> ls -> umount /dev/nvme0n3p1 -> if "busy": lsof /mnt

cd -> lsof /mnt -> umount /mnt

mkfs.ext4 --help
mkfs.ext4 /dev/nvme0n3p2 //how to format ext

mkfs [Tab][Tab]

-------------------------------------------------------------------------------------------------------------------------------------

14.8 Mounting Partitions through /etc/fstab

Uderstanding /etc/fstab
* /etc/fstab is the main configuration file to persistently mount partitions 
* /etc/fstab content is used to generate systemd mounts by the systemd-fstab-generator utility 
* To update systemd, make sure to use systemctl daemon-reload after editing /etc/fstab

vim /etc/stab -> "/dev/nvme0n3p1  /xfs  xfs  defaults  0 0" -> "/dev/nvme0n3p2  /ext4  ext4  defaults  0 0" -> :wq! -> 
systemctl daemon-reload -> mkdir /xfs /ext4 -> mount -a -> mount 

-------------------------------------------------------------------------------------------------------------------------------------

14.9 Managing Persistent Naming Attributes 

Understanding Persistent Device Naming:

In datacenter environments, block device names may change. Different solutions exist for persistent naming:
* UUID: a UUID is automatically generated for each device that contains a file sy/stem or anything similar
* Label: while creating the file system, the option -L can be used to set an arbitrary name that can be used for mounting the file system
* Unique device names are created in /dev/disk

fdisk /dev/nvme0n3 -> Command: p -> Command: n -> Command: p -> Command: w -> mkfs.xfs /dev/nvme0n3p5 -> mkfs.ext4 /dev/nvme0n3p6 

cd / -> mkdir /books /articles -> vim /etc/fstab -> "/dev/nvme0n3p5  /books  xfs  defaults  0 0" -> "/dev/nvme0n3p6  /articles  ext4  defaults  0 0" -> to check: mount -a -> mount -> fdisk nvme0n3 -> Command: p -> Command: d -> Partion number: 5 -> Command: w -> need to reboot system to use new table of partitions after one was deleted 

Reboot -> GRUB -> 1st by 'e' -> line with 'linux' -> delete 'rhgb quiet' -> Ctrl+X -> vim /etc/fstab -> # przed partycje, ktora wypadla z obiegu przez usuniecie partycji przed nia w kolejnosci -> Ctrl+D -> login 

blkid - UUID

tune2fs - to set a label
xfs_admin 

tune2fs -L articles /dev/nvme0n3p5 -> vim /etc/fstab -> "LABEL=articles /articles  ext4  defaults  0 0" -> mount | grep artic -> mount -a
-> mount | grep artic // should see that mount was issued 

vim /etc/fstab -> UUID on boot device

instead UUID: cd /dev/disk -> ls -l -> ls by-path/ //symbolic links that points specific devices, but it's better to focus on LABEL.

-------------------------------------------------------------------------------------------------------------------------------------
14.10 Managing Systemd Mounts

* /etc/fstab mounts already are systemd mounts 
* Mounts can be created using systemd .mount files
* Using .mount files allows you to be more specyfic in defining dependencies 
* Use systemctl cat tmp.mount for an example

systemctl cat tmp.mount -> to see what, where ... should be mounted 

mount | grep tmp 
systemctl status tmp.mount
systemctl enable --now tmp.mount
mount | grep tmp
vim /etc/fstab 
cp /usr/lib/systemd/system/tmp.mount /etc/systemd/system/articles.mount
vim /etc/systemd/system/articles.mount
systemctl deamon-reload
systemctl status articles.mount
umount /articles
systemctl enable --now articles.mount
systemctl status articles.mount

-------------------------------------------------------------------------------------------------------------------------------------

14.11 Managing XFS File Systems

* The xfsdump utility can be used for creating backups of XFS formatted devices and considers specific XFS attributes
	* xfsdump only works on a complete XFS device 
	* xfsdump can make full backups (-I 0) or different levels of incremental backuops
	* xfsdump -I 0 -f /backupfiles/data.xfsdump /data creates a full backup of the contents of the /data directory

* The xfsrestore command is used to restore a backup that was made with xfsdump
	* xfsrestore -f /backupfiles/data.xfsdump /data

* The xfsrepair command can be manually started to repair broken XFS file systems

-------------------------------------------------------------------------------------------------------------------------------------

14.12 Creating a Swap Partition

Understanding Swap:
* Swap is a RAM that is emulated on disk
* All Linux systems should have at least some swap
	* The amount of swap depends on the use of the server
* Swap can be created on any block device, including swap files 
* While creating swap with parted, set file system to linux-swap
* After creating the swap partition, use mkswap to create the swap FS
* Activate using swapon

parted /dev/nvme0n2 -> print -> mkpart -> Partition name: swap -> File system type? linux-swap -> Start? 1GiB -> End? 2GiB -> print -> quit

lsblk
mkswap /dev/nvme0n2p2
free -m
swapon /dev/nvme0n2p2
free -m
vim /etc/fstab -> "/dev/nvme0n2p2  swap  swap  defaults 0 0" 

-------------------------------------------------------------------------------------------------------------------------------------

Managing Advanced Storage
=============================

-------------------------------------------------------------------------------------------------------------------------------------

15.1 Undeerstanding LVM, Stratis and VDO

Understanding Advanced Storage:
* LVM Logical Volumes
	* Used during default installation of RHEL
	* Adds flexibility to storage (resize, snapshots and more)

* Stratis 
	* Next generation Volume Managing Filesystem that uses thin provisioning by default 
	* Implemented in user space, which makes API access possible 

* Vitual Data Optimizer
	* Focused on storing files in the most efficient way
	* Manages deduplicated and compressed storage pools

------------------------------------------------------------------------------------------------------------------------------------------

15.2 Understanding LVM Setup

LV (ext4)	LV(xfs)

^		^
	
---------------------------
volume group			/dev/vg/lv
---------------------------

^		^

PV (physical volumes)


------------------------------------------------------------------------------------------------------------------------------------------

15.3 Creating an LVM Logical Volume

LVM Creation Procedure Overview

* Create a partition, from parted use set n lvm on
* Use pvcreate /dev/sdb1 to create the physical volume
* Use vgcreate vgdata /dev/sdb1 to create the volume group
* Use lvcreate -n lvdata -L 1G vgdata to create the logical volume 
* Use mkfs /dev/vgdata/lvdata to create a file system
* Put in /etc/fstab to mount it persistently

lsblk
parted /dev/nvme0n2 -> print -> Partition name: lvm1 -> Start? 2G -> End? 3G -> print -> set 3 lvm on -> print -> mkpart -> 
Partition name? lvm2 -> Start? 3 GiB -> End? 4GiB -> print -> set 4 lvm on -> print -> quit

pvcreate /dev/nvme0np3 -> lsblk -> pvcreate /dev/nvme0n2p3 -> created

vgcreate vgdata /dev/nvme0n2p3 -> pvs -> vgs -> lvcreate -n lvdata -L 812M vgdata 

mkfs.xfs /dev/vgdata/lvdata -> mkdir /mounts/lvm1 -> vim dev/fstab/ -> "/dev/vgdata/lvdata  /mounts/lvm1  xfs  defaults 0 0"
-> mount -a -> findmnt

------------------------------------------------------------------------------------------------------------------------------------------

15.4 Understanding Device Mapper and LVM Device Names

Understanding Device Mapper Names:
* Device mapper is the system that the kernel uses to interface storage devices
* Device mapper generates meaningless names, like /dev/dm-0 and /dev/dm-1
* Meaningful names are provided as symbolic links through /dev/mapper 
	* /dev/mapper/vgdata-lvdata
* Alternatively, use the LVM generated symbolic links 
	* /dev/vgdata/lvdata

mount
tail -n 1 /etc/fstab
ls -l /dev/vgdata/lvdata /dev/mapper/vgdata-lvdata

------------------------------------------------------------------------------------------------------------------------------------------

15.5 Resizing LVM Logical Volumes

Resizing Logical Volumes:
* Use vgs to verify avaliability in the volume group'
* If required, use vgextend to add one or more PVs to the VG
* Use lvextend -r -L +1G to grow the LVM logical volume, including the file system it's hosting
	* e2resize is an independent resize utility for Ext file systems
	* xfs_growfs can be used to grow an XFS file system
* Shrinking is not possible on XFS volumes

df -h -> vgs -> vgextend vgdata /dev/nvme0n2p4 -> vgs -> lvextend -r -L +1020M /dev/vgdata/lvdata -> df -h

------------------------------------------------------------------------------------------------------------------------------------------

15.6 Understanding Stratis Setup

Understanding Stratis:
* Stratis is a volume management file system and is Red Hat's answer to Btrfs and ZFS
	* On top of Stratis a regular file system is needed: XFS

* It is bulit on top of any block device, including LVM devices
* It offers advanced features 
	* Thin provisioning 
	* Snapshots
	* Cache tier 
	* Programmatic API
	* Monitoring and Repair

Stratis Architecture:
* The Stratis Pool is created from one or more storage devices (blockdev)
	* Stratis creates a /dev/stratis/my-pool directory for each pool
	* This directory contains links to devices that represent the file systems in the pool
	* Block devices in a pool may not be thin provisioned

* The (XFS) file system is put in a volume on top of the pool and is an integrated part of it 
	* Each pool can contain one or more file systems
	* File systems are thin provisioned and do not have a fixed size
	* The thin volume which is an integrated part of the file system automatically grows as more data is added to the file system

------------------------------------------------------------------------------------------------------------------------------------------

15.7 Creating Stratis Volumes

Procedure Overview - 1: 
* yum install stratis-cli stratisd
* systemctl enable --now stratisd
* stratis pool create mypool /dev/nvme0n2
	* Add new block devices later using stratis blockdev add-data
	* Partitions are NOT supported
	* Note that the block device must be at least 1GiB
* stratis fs create mypool myfs1
	* Note this will create an XFS file system!
* stratis fs list mypool will show all file systems in the pool

Procedure Overview - 2:
* mkdir /myfs1
* mount /dev/stratis/mypool/myfs1/myfs1
* stratis pool list
* stratis filesystem list
* stratis blockdev list mypool
* blkid to find the stratis volume UUID
* Mount by UUID in /etc/fstab

yum install -y startis-cli stratid
systemctl enable --now stratisd
stratis pool create mypool /dev/nvme0n2
stratis pool
stratis fs create mypool myfs1
stratis fs
mkdir /myfs1
mount | grep myfs1
mount /dev/startis/mypool/myfs1
mount
stratis pool list
stratis fs list
stratis blockdev list mypool
lsblk
blkid
vim /etc/fstab
"UUID="2413f3aa-384d-4d95-917a-a5e80731cbc2"  /myfs1  xfs  defaults 0 0"
reboot
su -
mount | grep myfs
 
------------------------------------------------------------------------------------------------------------------------------------------

15.8 Managing Stratis Śtorage Features 

Monitoring Stratis Volumes:
* Standard Linux tools don't give accurate sizes as Stratis volumes are thin provisioned 
* Use stratis blockdev to show information about all block devices used for Stratis
* Use stratis pool to show information about all pools 
	* Note that Physical Used should not come too close to Physical Size
* Use stratis filesystem to monitor individual filesystems

Using Stratis Snapshots
* stratis fs snapshot mypool myfs1-snapshot
	* Changes to the original FS will not be reflected in the snapshot
	* Use mount /stratis/mypool/my-fs-snapshot/mnt to mount it
* Revert the original volume to the state in the snapshot
	* umount /myfs1
	* stratis fs destroy mypool myfs1
	* stratis fs snapshot mypool myfs1-snap myfs1
* Note that this approach wouldn't work on LVM!

Removing Stratis Snapshots:
* stratis filesystem destroy mypool mysnapshot will delete a snapshot 
* A similar procedure is used for destroying file systems: stratis filesystem destroy mypool myfs
* When there are no more file systems in a pool, use stratis pool destroy mypool to delete the pool

stratis blockdev
stratis pool
stratis filesystem
df -h | grep myfs
stratis filesystem
stratis filesystem snapshot mypool myfs1-snapshot 
stratis filesystem list 
mount /dev/stratis/mypool/myfs1-snapshot /mnt
ls
ls /mnt/
cp /etc/a* /mnt
cd /mnt
ls
cd ..
umount /myfs1
stratis filesystem destroy mypool myfs1
stratis filesystem list
stratis filesystem snapshot mypool myfs1-snapshot myfs1 
mount -a
cd /myfs1/
ls
stratis filesystem destroy mypool myfs1-snapshot

------------------------------------------------------------------------------------------------------------------------------------------

15.9 Understanding VDO

* VDO (Virtual Data Optimizer) is used to optimize how data is stored on disk
* It is used as a separate volume manager on top of which file system will be created
* Provides thin-provisioned storage 
	* Use a logical size 10 times the physical size for VMs and containers 
	* Use a logical size 3 times the physical size for object storage 
* Used in Cloud/Container environments
* It manages deduplicated and compressed storage pools in RHEL 8

------------------------------------------------------------------------------------------------------------------------------------------

15.10 Configuring VDO Volumes

Procedure Overview
* Ensure that underlying block devices are >4GiB 
* yum install vdo kmod-kvdo
* vdo create --name=vdo1 --device=/dev/nvme0np2 --vdoLogicalSize=1T
* mkfs.xfs -K /dev/mapper/vdo1
* udevadm settle will wait for the system to register the new device name 
* In /etc/fstab, include the x-systemd.requires=vdo.service mount option 
* Monitor using vdostats --human-readable

lsblk
yum install vdo kmod-kvdo
vdo create --name=vdo1 --device=/dev/nvme0n6 --vdoLogicalSize=10T
mkfs.xfs -K /dev/mapper/vdo1
udevadm settle
mkdir /vdo1
vim /etc/fstab
"/dev/mapper/vdo1  /vdo1  xfs  x-systemd.requires=vdo.service  0 0"
mount -a
mount
vdostats --human-readable
df -h

------------------------------------------------------------------------------------------------------------------------------------------

15.11 Understanding LUKS Encrypted Volumes

/dev/sda1 -> Cryptsetup luksFormat -> Cryptsetup luksOpen secret -> /dev/mapper/secret -> mkfs -> mount

------------------------------------------------------------------------------------------------------------------------------------------

15.12 Configuring LUKS Encrypted Volumes 

Procedure Overview:
* Use parted to create a partition
* cryptsetup luksFormat will format the LUKS device
* cryptsetup luksOpen will open it and create a device mapper name 
* Mount the resulting device mapper device
* To automate the cryptsetup luksOpen, use /etc/crypttab
* To automate mounting the volume, use /etc/fstab

parted /dev/nvme0n2
print
mkpart
Partition name? luks
Start? 4GiB
End? 6GiB
print
quit
lsblk | less
cryptsetup luksFormat /dev/nvme0n2p5 
cryptsetup luksOpen /dev/nvme0n2p5 secret
ls -l /dev/mapper
mkfs.vxfs /dev/mapper/secret
mkdir /secret
vim /etc/fstab
"/dev/mapper/secret  /secret  xfs  defaults  0 0"
vim /etc/crypyttab
"secret  /dev/nvme0n2p5  none"
reboot

------------------------------------------------------------------------------------------------------------------------------------------





